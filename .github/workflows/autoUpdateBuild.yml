name: autoUpdateChecker

on: [push]

permissions:
  contents: write
  discussions: write

env:
  DOWNLOAD_REPO: "DexonTechnologyPCL/autoUpdateChecker"

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Install Package Python
        run: |
          pip install pyinstaller
          pip install requests
          pip install datetime

      - name: Install GitHub CLI
        run: |
          choco install gh -y

      - name: Compile the Script
        run: |
          pyinstaller --onefile autoUpdate.py

      - name: Delete existing release
        shell: pwsh
        run: |
          $tag = "v1.0.0"
          gh release delete $tag --yes --repo ${{ github.repository }} 2>&1 | Out-Null
          git push --delete origin $tag 2>&1 | Out-Null
          Write-Output "Deleted existing release and tag: $tag"
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        shell: pwsh
        run: |
          $output = gh release create v1.0.0 --title "Release v1.0.0" --notes "Release notes for version 1.0.0" --repo ${{ env.DOWNLOAD_REPO }} --draft=false --prerelease=false
          if ($output -match "https://github.com/[^/]+/[^/]+/releases/tag/[^/]+") {
            $releaseUrl = $matches[0]
            "release_url=$releaseUrl" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "Failed to extract release URL from output"
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        shell: pwsh
        run: |
          gh release upload v1.0.0 ./dist/autoUpdate.exe --repo ${{ env.DOWNLOAD_REPO }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Release Asset
        shell: pwsh
        run: |
          $releaseInfo = gh release view v1.0.0 --repo ${{ env.DOWNLOAD_REPO }} --json assets
          $assetUrl = ($releaseInfo | ConvertFrom-Json).assets | Where-Object { $_.name -like "*.exe" } | Select-Object -ExpandProperty url
          if ($assetUrl) {
            $downloadPath = "D:\autoUpdate.exe"
            Invoke-WebRequest -Uri $assetUrl -OutFile $downloadPath
            Write-Output "Downloaded autoUpdate.exe to $downloadPath"
          } else {
            Write-Error "No .exe asset found in the release"
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
