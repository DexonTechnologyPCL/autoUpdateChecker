name: autoUpdateChecker

on: [push]

permissions:
  contents: write
  discussions: write

env:
  DOWNLOAD_REPO: "DexonTechnologyPCL/autoUpdateChecker"

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Install Package Python
        run: |
          pip install pyinstaller
          pip install requests
          pip install argparse
          pip install datetime
          pip install pathlib
          pip install pefile

      - name: Install GitHub CLI
        run: |
          choco install gh -y

      - name: Compile the Script
        run: |
          pyinstaller --onefile autoUpdate.py

      - name: Delete existing release
        shell: pwsh
        run: |
          $tag = "v1.0.0"
          gh release delete $tag --yes --repo ${{ github.repository }} 2>&1 | Out-Null
          git push --delete origin $tag 2>&1 | Out-Null
          Write-Output "Deleted existing release and tag: $tag"
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        shell: pwsh
        run: |
          $output = gh release create v1.0.0 --title "Release v1.0.0" --notes "Release notes for version 1.0.0" --repo ${{ env.DOWNLOAD_REPO }} --draft=false --prerelease=false
          if ($output -match "https://github.com/[^/]+/[^/]+/releases/tag/[^/]+") {
            $releaseUrl = $matches[0]
            "release_url=$releaseUrl" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "Failed to extract release URL from output"
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        shell: pwsh
        run: |
          gh release upload v1.0.0 ./dist/autoUpdate.exe --repo ${{ env.DOWNLOAD_REPO }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Release Asset
        shell: pwsh
        run: |
          $downloadPath = "C:\Users\suwannee.thongtha\Downloads"
          if (!(Test-Path -Path $downloadPath)) {
            New-Item -ItemType Directory -Force -Path $downloadPath
          }
          gh release download v1.0.0 --repo ${{ env.DOWNLOAD_REPO }} --pattern "*.exe" --dir $downloadPath
          $downloadedFile = Get-ChildItem -Path $downloadPath -Filter *.exe | Select-Object -First 1
          if ($downloadedFile) {
            Write-Output "Downloaded $($downloadedFile.Name) to $($downloadedFile.FullName)"
          } else {
            Write-Error "No .exe file was downloaded"
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .exe as artifact
        uses: actions/upload-artifact@v3
        with:
          name: autoUpdate
          path: C:\Users\suwannee.thongtha\Downloads\autoUpdate.exe
